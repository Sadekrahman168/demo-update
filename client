package org.test;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

@Service
public class ProducerConsumerClientImpl implements ProducerConsumerClient{
	
	private static final int _WAIT_TIME = 50;
	private static final int _MAX_EXECUTOR_WAIT_TIME = 5;
	
	@Override
	public void process(){
		
		ExecutorService executorService = Executors.newFixedThreadPool(2);
		final ConsumerProducer producer = new ConsumerProducer();
		final ConsumerProducer consumer = new ConsumerProducer();
		
		
		try {
		   //== Create two tasks to simulate a deadlock.
			Runnable thread1Task = () -> {
				synchronized (producer) {
					try {
						TimeUnit.MILLISECONDS.sleep(_WAIT_TIME);
					}catch (InterruptedException ignore){
						System.err.println("thread1Task");
					}
					synchronized (consumer) {

					}

				}
			};
			
			Runnable thread2Task = () -> {
				synchronized (consumer) {
					try {
						TimeUnit.MILLISECONDS.sleep(_WAIT_TIME);
					}catch (InterruptedException ignore){
						System.err.println("thread12Task");
					}
					synchronized (producer) {

					}

				}
			};
			
			//== Run the tasks
			executorService.submit(thread1Task);
	        executorService.submit(thread2Task);
	        //== Try to perform graceful Shutdown.
	        executorService.shutdown();
			executorService.awaitTermination(_MAX_EXECUTOR_WAIT_TIME, TimeUnit.SECONDS);
		}
		catch (InterruptedException e) {
			throw new RuntimeException(e.getMessage());
		}
		finally {
		    if (!executorService.isTerminated()) {
		        throw new RuntimeException("Deadlock detected!");
		    }
		    executorService.shutdownNow();
		}
		
	}

}


package org.test;

public interface ProducerConsumerClient {
	/**
	 * Process consumption and production 
	 * 
	 */
	public void process();

}



package org.test;

import java.util.LinkedList;
import java.util.UUID;

public class ConsumerProducer {
	
	LinkedList<Integer> dataList;


	public ConsumerProducer() {
		dataList = new LinkedList<>();
	}

	
	public void produce(){
		UUID uuid = UUID.randomUUID();
		dataList.add(uuid.variant());
		
	}
	
	public void consume(){
		
		if( dataList.size() > 0){
			dataList.removeFirst();
		}
		
	}
	
	

}















